// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `init_database`, `initialize_tables`
// These types are ignored because they are not used by any `pub` functions: `Student`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Database>>
abstract class Database implements RustOpaqueInterface {
  Future<void> displayPathToDatabase();

  Future<void> enrollStudent(
      {required int studentId,
      required int courseId,
      required String semester});

  Future<void> execEnrollStudent(
      {required int studentId,
      required int courseId,
      required String semester});

  Future<List<Course>> execQueryCoursesBySemester({required String semester});

  Future<void> execUnenrollStudent(
      {required int studentId,
      required int courseId,
      required String semester});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Database> newInstance({required String dbPath}) =>
      RustLib.instance.api.crateApiSelectClassDatabaseNew(dbPath: dbPath);

  Future<List<Course>> queryCoursesBySemester({required String semester});

  Future<List<Enrollment>> queryEnrollmentsByStudentAndSemester(
      {required int studentId, required String semester});

  Future<void> unenrollStudent(
      {required int studentId,
      required int courseId,
      required String semester});
}

class Course {
  final int courseId;
  final String courseName;
  final int teacherId;
  final String classroom;
  final String timeSlot;
  final String semester;
  final int credit;
  final int capacity;

  const Course({
    required this.courseId,
    required this.courseName,
    required this.teacherId,
    required this.classroom,
    required this.timeSlot,
    required this.semester,
    required this.credit,
    required this.capacity,
  });

  @override
  int get hashCode =>
      courseId.hashCode ^
      courseName.hashCode ^
      teacherId.hashCode ^
      classroom.hashCode ^
      timeSlot.hashCode ^
      semester.hashCode ^
      credit.hashCode ^
      capacity.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Course &&
          runtimeType == other.runtimeType &&
          courseId == other.courseId &&
          courseName == other.courseName &&
          teacherId == other.teacherId &&
          classroom == other.classroom &&
          timeSlot == other.timeSlot &&
          semester == other.semester &&
          credit == other.credit &&
          capacity == other.capacity;
}

class Enrollment {
  final int enrollmentId;
  final int studentId;
  final int courseId;
  final String semester;
  final String status;

  const Enrollment({
    required this.enrollmentId,
    required this.studentId,
    required this.courseId,
    required this.semester,
    required this.status,
  });

  @override
  int get hashCode =>
      enrollmentId.hashCode ^
      studentId.hashCode ^
      courseId.hashCode ^
      semester.hashCode ^
      status.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Enrollment &&
          runtimeType == other.runtimeType &&
          enrollmentId == other.enrollmentId &&
          studentId == other.studentId &&
          courseId == other.courseId &&
          semester == other.semester &&
          status == other.status;
}
