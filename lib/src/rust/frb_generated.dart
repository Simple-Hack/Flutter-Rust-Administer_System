// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/select_class.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => 1433586706;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_my_final_web',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiSelectClassDatabaseDisplayPathToDatabase(
      {required Database that});

  Future<void> crateApiSelectClassDatabaseEnrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester});

  Future<void> crateApiSelectClassDatabaseExecEnrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester});

  Future<List<Course>> crateApiSelectClassDatabaseExecQueryCoursesBySemester(
      {required Database that, required String semester});

  Future<void> crateApiSelectClassDatabaseExecUnenrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester});

  Future<Database> crateApiSelectClassDatabaseNew({required String dbPath});

  Future<List<Course>> crateApiSelectClassDatabaseQueryCoursesBySemester(
      {required Database that, required String semester});

  Future<List<Enrollment>>
      crateApiSelectClassDatabaseQueryEnrollmentsByStudentAndSemester(
          {required Database that,
          required int studentId,
          required String semester});

  Future<void> crateApiSelectClassDatabaseUnenrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester});

  List<Grade> crateApiSimpleFetchGrades(
      {required String semester, required int studentId});

  String crateApiSimpleGetPlatformVersion();

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Database;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Database;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DatabasePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiSelectClassDatabaseDisplayPathToDatabase(
      {required Database that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSelectClassDatabaseDisplayPathToDatabaseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSelectClassDatabaseDisplayPathToDatabaseConstMeta =>
          const TaskConstMeta(
            debugName: "Database_display_path_to_database",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiSelectClassDatabaseEnrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_i_32(studentId, serializer);
        sse_encode_i_32(courseId, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSelectClassDatabaseEnrollStudentConstMeta,
      argValues: [that, studentId, courseId, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSelectClassDatabaseEnrollStudentConstMeta =>
      const TaskConstMeta(
        debugName: "Database_enroll_student",
        argNames: ["that", "studentId", "courseId", "semester"],
      );

  @override
  Future<void> crateApiSelectClassDatabaseExecEnrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_i_32(studentId, serializer);
        sse_encode_i_32(courseId, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSelectClassDatabaseExecEnrollStudentConstMeta,
      argValues: [that, studentId, courseId, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSelectClassDatabaseExecEnrollStudentConstMeta =>
      const TaskConstMeta(
        debugName: "Database_exec_enroll_student",
        argNames: ["that", "studentId", "courseId", "semester"],
      );

  @override
  Future<List<Course>> crateApiSelectClassDatabaseExecQueryCoursesBySemester(
      {required Database that, required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_course,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiSelectClassDatabaseExecQueryCoursesBySemesterConstMeta,
      argValues: [that, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSelectClassDatabaseExecQueryCoursesBySemesterConstMeta =>
          const TaskConstMeta(
            debugName: "Database_exec_query_courses_by_semester",
            argNames: ["that", "semester"],
          );

  @override
  Future<void> crateApiSelectClassDatabaseExecUnenrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_i_32(studentId, serializer);
        sse_encode_i_32(courseId, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSelectClassDatabaseExecUnenrollStudentConstMeta,
      argValues: [that, studentId, courseId, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSelectClassDatabaseExecUnenrollStudentConstMeta =>
      const TaskConstMeta(
        debugName: "Database_exec_unenroll_student",
        argNames: ["that", "studentId", "courseId", "semester"],
      );

  @override
  Future<Database> crateApiSelectClassDatabaseNew({required String dbPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSelectClassDatabaseNewConstMeta,
      argValues: [dbPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSelectClassDatabaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "Database_new",
        argNames: ["dbPath"],
      );

  @override
  Future<List<Course>> crateApiSelectClassDatabaseQueryCoursesBySemester(
      {required Database that, required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_course,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSelectClassDatabaseQueryCoursesBySemesterConstMeta,
      argValues: [that, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSelectClassDatabaseQueryCoursesBySemesterConstMeta =>
          const TaskConstMeta(
            debugName: "Database_query_courses_by_semester",
            argNames: ["that", "semester"],
          );

  @override
  Future<List<Enrollment>>
      crateApiSelectClassDatabaseQueryEnrollmentsByStudentAndSemester(
          {required Database that,
          required int studentId,
          required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_i_32(studentId, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_enrollment,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiSelectClassDatabaseQueryEnrollmentsByStudentAndSemesterConstMeta,
      argValues: [that, studentId, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSelectClassDatabaseQueryEnrollmentsByStudentAndSemesterConstMeta =>
          const TaskConstMeta(
            debugName: "Database_query_enrollments_by_student_and_semester",
            argNames: ["that", "studentId", "semester"],
          );

  @override
  Future<void> crateApiSelectClassDatabaseUnenrollStudent(
      {required Database that,
      required int studentId,
      required int courseId,
      required String semester}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            that, serializer);
        sse_encode_i_32(studentId, serializer);
        sse_encode_i_32(courseId, serializer);
        sse_encode_String(semester, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSelectClassDatabaseUnenrollStudentConstMeta,
      argValues: [that, studentId, courseId, semester],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSelectClassDatabaseUnenrollStudentConstMeta =>
      const TaskConstMeta(
        debugName: "Database_unenroll_student",
        argNames: ["that", "studentId", "courseId", "semester"],
      );

  @override
  List<Grade> crateApiSimpleFetchGrades(
      {required String semester, required int studentId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(semester, serializer);
        sse_encode_i_32(studentId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_grade,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSimpleFetchGradesConstMeta,
      argValues: [semester, studentId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleFetchGradesConstMeta => const TaskConstMeta(
        debugName: "fetch_grades",
        argNames: ["semester", "studentId"],
      );

  @override
  String crateApiSimpleGetPlatformVersion() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetPlatformVersionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetPlatformVersionConstMeta =>
      const TaskConstMeta(
        debugName: "get_platform_version",
        argNames: [],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Database => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Database => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Database
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Course dco_decode_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Course(
      courseId: dco_decode_i_32(arr[0]),
      courseName: dco_decode_String(arr[1]),
      teacherId: dco_decode_i_32(arr[2]),
      classroom: dco_decode_String(arr[3]),
      timeSlot: dco_decode_String(arr[4]),
      semester: dco_decode_String(arr[5]),
      credit: dco_decode_i_32(arr[6]),
      capacity: dco_decode_i_32(arr[7]),
    );
  }

  @protected
  Enrollment dco_decode_enrollment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Enrollment(
      enrollmentId: dco_decode_i_32(arr[0]),
      studentId: dco_decode_i_32(arr[1]),
      courseId: dco_decode_i_32(arr[2]),
      semester: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Grade dco_decode_grade(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Grade(
      courseId: dco_decode_i_32(arr[0]),
      courseName: dco_decode_String(arr[1]),
      score: dco_decode_f_64(arr[2]),
      gpa: dco_decode_f_64(arr[3]),
      semester: dco_decode_String(arr[4]),
      studentId: dco_decode_i_32(arr[5]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Course> dco_decode_list_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_course).toList();
  }

  @protected
  List<Enrollment> dco_decode_list_enrollment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_enrollment).toList();
  }

  @protected
  List<Grade> dco_decode_list_grade(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_grade).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Database
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Database
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Database
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Course sse_decode_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_courseId = sse_decode_i_32(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_teacherId = sse_decode_i_32(deserializer);
    var var_classroom = sse_decode_String(deserializer);
    var var_timeSlot = sse_decode_String(deserializer);
    var var_semester = sse_decode_String(deserializer);
    var var_credit = sse_decode_i_32(deserializer);
    var var_capacity = sse_decode_i_32(deserializer);
    return Course(
        courseId: var_courseId,
        courseName: var_courseName,
        teacherId: var_teacherId,
        classroom: var_classroom,
        timeSlot: var_timeSlot,
        semester: var_semester,
        credit: var_credit,
        capacity: var_capacity);
  }

  @protected
  Enrollment sse_decode_enrollment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_enrollmentId = sse_decode_i_32(deserializer);
    var var_studentId = sse_decode_i_32(deserializer);
    var var_courseId = sse_decode_i_32(deserializer);
    var var_semester = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    return Enrollment(
        enrollmentId: var_enrollmentId,
        studentId: var_studentId,
        courseId: var_courseId,
        semester: var_semester,
        status: var_status);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  Grade sse_decode_grade(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_courseId = sse_decode_i_32(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_score = sse_decode_f_64(deserializer);
    var var_gpa = sse_decode_f_64(deserializer);
    var var_semester = sse_decode_String(deserializer);
    var var_studentId = sse_decode_i_32(deserializer);
    return Grade(
        courseId: var_courseId,
        courseName: var_courseName,
        score: var_score,
        gpa: var_gpa,
        semester: var_semester,
        studentId: var_studentId);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Course> sse_decode_list_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Course>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_course(deserializer));
    }
    return ans_;
  }

  @protected
  List<Enrollment> sse_decode_list_enrollment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Enrollment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enrollment(deserializer));
    }
    return ans_;
  }

  @protected
  List<Grade> sse_decode_list_grade(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Grade>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_grade(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DatabaseImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DatabaseImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
          Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DatabaseImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_course(Course self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.courseId, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_i_32(self.teacherId, serializer);
    sse_encode_String(self.classroom, serializer);
    sse_encode_String(self.timeSlot, serializer);
    sse_encode_String(self.semester, serializer);
    sse_encode_i_32(self.credit, serializer);
    sse_encode_i_32(self.capacity, serializer);
  }

  @protected
  void sse_encode_enrollment(Enrollment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.enrollmentId, serializer);
    sse_encode_i_32(self.studentId, serializer);
    sse_encode_i_32(self.courseId, serializer);
    sse_encode_String(self.semester, serializer);
    sse_encode_String(self.status, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_grade(Grade self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.courseId, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_f_64(self.score, serializer);
    sse_encode_f_64(self.gpa, serializer);
    sse_encode_String(self.semester, serializer);
    sse_encode_i_32(self.studentId, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_course(List<Course> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_course(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enrollment(
      List<Enrollment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enrollment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_grade(List<Grade> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_grade(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class DatabaseImpl extends RustOpaque implements Database {
  // Not to be used by end users
  DatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Database,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Database,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DatabasePtr,
  );

  Future<void> displayPathToDatabase() =>
      RustLib.instance.api.crateApiSelectClassDatabaseDisplayPathToDatabase(
        that: this,
      );

  Future<void> enrollStudent(
          {required int studentId,
          required int courseId,
          required String semester}) =>
      RustLib.instance.api.crateApiSelectClassDatabaseEnrollStudent(
          that: this,
          studentId: studentId,
          courseId: courseId,
          semester: semester);

  Future<void> execEnrollStudent(
          {required int studentId,
          required int courseId,
          required String semester}) =>
      RustLib.instance.api.crateApiSelectClassDatabaseExecEnrollStudent(
          that: this,
          studentId: studentId,
          courseId: courseId,
          semester: semester);

  Future<List<Course>> execQueryCoursesBySemester({required String semester}) =>
      RustLib.instance.api
          .crateApiSelectClassDatabaseExecQueryCoursesBySemester(
              that: this, semester: semester);

  Future<void> execUnenrollStudent(
          {required int studentId,
          required int courseId,
          required String semester}) =>
      RustLib.instance.api.crateApiSelectClassDatabaseExecUnenrollStudent(
          that: this,
          studentId: studentId,
          courseId: courseId,
          semester: semester);

  Future<List<Course>> queryCoursesBySemester({required String semester}) =>
      RustLib.instance.api.crateApiSelectClassDatabaseQueryCoursesBySemester(
          that: this, semester: semester);

  Future<List<Enrollment>> queryEnrollmentsByStudentAndSemester(
          {required int studentId, required String semester}) =>
      RustLib.instance.api
          .crateApiSelectClassDatabaseQueryEnrollmentsByStudentAndSemester(
              that: this, studentId: studentId, semester: semester);

  Future<void> unenrollStudent(
          {required int studentId,
          required int courseId,
          required String semester}) =>
      RustLib.instance.api.crateApiSelectClassDatabaseUnenrollStudent(
          that: this,
          studentId: studentId,
          courseId: courseId,
          semester: semester);
}
